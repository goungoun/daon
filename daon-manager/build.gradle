buildscript {
	ext {
		elasticVersion = rootProject.elasticVersion
		springBootVersion = rootProject.springBootVersion
	}

	repositories {
		jcenter()
		maven {
			url "https://plugins.gradle.org/m2/"
		}

	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "com.moowork.gradle:gradle-node-plugin:1.1.1"
	}
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.moowork.node'


ext {
	mainClassName = 'daon.manager.Application'
}

springBoot {
	buildInfo {
		properties {
			artifact = "daon-manager"
			version = '0.0.1'
			group = 'daon.manager'
			name = 'Daon Manager application'
		}
	}
}

bootJar {
	mainClassName = "${mainClassName}"
}

repositories {
	mavenCentral()
}


node {
	// Version of node to use.
	version = '4.4.4'

	// Version of npm to use.
	npmVersion = '4.4.4'

	// Base URL for fetching node distributions (change if you have a mirror).
	distBaseUrl = 'https://nodejs.org/dist'

	// If true, it will download node using above parameters.
	// If false, it will try to use globally installed node.
	download = true

	// Set the work directory for unpacking node
	workDir = file("${project.buildDir}/frontend")

	// Set the work directory for NPM
	npmWorkDir = file("${project.buildDir}/frontend")

	// Set the work directory where node_modules should be located
	nodeModulesDir = file("${project.projectDir}/frontend")
}


task buildFrontend(type: NpmTask) {
	// install the express package only
	args = ['run', 'build']
}


task devFrontend(type: NpmTask) {
	// install the express package only
	args = ['run', 'dev']
}

configure([devFrontend, buildFrontend]) {
	group = 'Publishing'
	description = 'Publish source code to output directory'
}

bootJar.dependsOn(buildFrontend)

buildFrontend.dependsOn(npm_install)

devFrontend.dependsOn(npm_install)

npm_install.dependsOn(npm_cache_clean)

task buildDaonManager {

	doLast {
		copy {
			from "${project.buildDir}/libs/daon-manager.jar"
			into "${rootProject.projectDir}/docker/daon-manager"
		}
	}
}

buildDaonManager.dependsOn(bootJar)

configure([buildDaonManager]) {
	group = 'build'
}

dependencies {
//	compile project(':daon-core')
	compile project(':daon-spark')
//	compile project(path: ':daon-spark', configuration: 'shadow')

//	https://stackoverflow.com/questions/42352091/spark-sql-fails-with-java-lang-noclassdeffounderror-org-codehaus-commons-compil
//	compile "org.codehaus.janino:commons-compiler:2.7.8"
	compile "org.springframework.boot:spring-boot-starter-data-rest"
	compile "org.springframework.boot:spring-boot-starter-web"
	compile "org.springframework.boot:spring-boot-starter-actuator"
//	compile "org.springframework.boot:spring-boot-starter-batch"
	compile "org.springframework.boot:spring-boot-starter-websocket"
//	compile "org.elasticsearch:elasticsearch:5.5.2"
	compile "org.elasticsearch.client:transport:${elasticVersion}"
	compile "org.apache.logging.log4j:log4j-api"
	compile "org.apache.logging.log4j:log4j-core"
	compile "org.projectlombok:lombok:1.18.2"
	runtime "org.springframework.boot:spring-boot-devtools"
	testCompile "org.springframework.boot:spring-boot-starter-test"
	testCompile "org.springframework.restdocs:spring-restdocs-mockmvc"
}
